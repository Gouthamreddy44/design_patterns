@startuml
package com.iluwatar.consumer.callcostprocessor.interfaces {
  interface IPersistentCommonStorageUtility<T> {
    + dropMessageToPersistentStorage(Message<T>) {abstract}
    + readMessageFromPersistentStorage(MessageHeader) : Message<T> {abstract}
  }
}
package com.iluwatar.consumer.callcostprocessor.domain {
  class Message<T> {
    - messageData : MessageData<T>
    - messageHeader : MessageHeader
    + Message<T>(messageHeader : MessageHeader, messageData : MessageData<T>)
    # canEqual(other : Object) : boolean
    + equals(o : Object) : boolean
    + getMessageData() : MessageData<T>
    + getMessageHeader() : MessageHeader
    + hashCode() : int
    + setMessageData(messageData : MessageData<T>)
    + setMessageHeader(messageHeader : MessageHeader)
    + toString() : String
  }
  class MessageData<T> {
    - data : T
    + MessageData<T>(data : T)
    # canEqual(other : Object) : boolean
    + equals(o : Object) : boolean
    + getData() : T
    + hashCode() : int
    + setData(data : T)
    + toString() : String
  }
  class MessageHeader {
    - dataFileName : String
    - dataLocation : String
    - operataionName : String
    + MessageHeader()
    # canEqual(other : Object) : boolean
    + equals(o : Object) : boolean
    + getDataFileName() : String
    + getDataLocation() : String
    + getOperataionName() : String
    + hashCode() : int
    + setDataFileName(dataFileName : String)
    + setDataLocation(dataLocation : String)
    + setOperataionName(operataionName : String)
    + toString() : String
  }
  class UsageCostDetail {
    - callCost : double
    - dataCost : double
    - userId : String
    + UsageCostDetail()
    # canEqual(other : Object) : boolean
    + equals(o : Object) : boolean
    + getCallCost() : double
    + getDataCost() : double
    + getUserId() : String
    + hashCode() : int
    + setCallCost(callCost : double)
    + setDataCost(dataCost : double)
    + setUserId(userId : String)
    + toString() : String
  }
  class UsageDetail {
    - data : long
    - duration : long
    - userId : String
    + UsageDetail()
    # canEqual(other : Object) : boolean
    + equals(o : Object) : boolean
    + getData() : long
    + getDuration() : long
    + getUserId() : String
    + hashCode() : int
    + setData(data : long)
    + setDuration(duration : long)
    + setUserId(userId : String)
    + toString() : String
  }
}
package com.iluwatar.consumer.callcostprocessor.utility {
  class PersistentLocalStorageUtility<T> {
    - LOGGER : Logger {static}
    + PersistentLocalStorageUtility<T>()
    + dropMessageToPersistentStorage(message : Message<T>)
    + readMessageFromPersistentStorage(messageHeader : MessageHeader) : Message<T>
  }
}
package com.iluwatar.consumer.callcostprocessor.application {
  class UsageCostProcessor {
    ~ persistentCommonStorageUtilityForUsageCostDetail : IPersistentCommonStorageUtility<UsageCostDetail>
    ~ persistentCommonStorageUtilityForUsageDetail : IPersistentCommonStorageUtility<UsageDetail>
    - ratePerMB : double
    - ratePerSecond : double
    + UsageCostProcessor()
    + processUsageCost(inputMessageHeader : MessageHeader)
  }
  ~enum Rate {
    + RATE_PER_MB {static}
    + RATE_PER_SECOND {static}
    - rateValue : double
    + getRateValue() : double
    + valueOf(name : String) : Rate {static}
    + values() : Rate[] {static}
  }
  class UsageCostProcessorApplication {
    + UsageCostProcessorApplication()
    + main(args : String[]) {static}
  }
}
Rate ..+ UsageCostProcessor
Message -->  "-messageData" MessageData
Message -->  "-messageHeader" MessageHeader
UsageCostProcessor -->  "-persistentCommonStorageUtilityForUsageDetail" IPersistentCommonStorageUtility
PersistentLocalStorageUtility ..|> IPersistentCommonStorageUtility 
@enduml