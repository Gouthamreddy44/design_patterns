@startuml
package com.iluwatar.prototype {
  abstract class Prototype {
    + copy() : T {abstract}
  }
  class App {
    - LOGGER : Logger {static}
    + App()
    + main(args : String[]) {static}
  }
  abstract class Beast {
    + Beast()
    + equals(obj : Object) : boolean
  }
  class ElfBeast {
    - helpType : String
    + ElfBeast(helpType : String)
    + equals(obj : Object) : boolean
    + toString() : String
  }
  class ElfMage {
    - helpType : String
    + ElfMage(helpType : String)
    + equals(obj : Object) : boolean
    + toString() : String
  }
  class ElfWarlord {
    - helpType : String
    + ElfWarlord(helpType : String)
    + equals(obj : Object) : boolean
    + toString() : String
  }
  interface HeroFactory {
    + create(type : HeroTypes) : T {abstract}
  }
  class HeroFactoryImpl {
    - beast : Beast
    - mage : Mage
    - warlord : Warlord
    + HeroFactoryImpl(mage : Mage, warlord : Warlord, beast : Beast)
    + create(type : HeroTypes) : T
  }
  abstract class Mage {
    + Mage()
    + equals(obj : Object) : boolean
  }
  class OrcBeast {
    - weapon : String
    + OrcBeast(weapon : String)
    + equals(obj : Object) : boolean
    + toString() : String
  }
  class OrcMage {
    - weapon : String
    + OrcMage(weapon : String)
    + equals(obj : Object) : boolean
    + toString() : String
  }
  class OrcWarlord {
    - weapon : String
    + OrcWarlord(weapon : String)
    + equals(obj : Object) : boolean
    + toString() : String
  }

  abstract class Warlord {
    + Warlord()
    + equals(obj : Object) : boolean
  }
  enum HeroTypes {
    BEAST,
    MAGE,
    WARLORD
  }
}

Beast ..|> Prototype
ElfBeast --|> Beast
OrcBeast --|> Beast
Mage ..|> Prototype
ElfMage --|> Mage
OrcMage --|> Mage
Warlord ..|> Prototype
ElfWarlord --|> Warlord 
OrcWarlord --|> Warlord
HeroFactory ..+ App
HeroTypes ..+ HeroFactory
HeroFactoryImpl -->  "-beast" Beast
HeroFactoryImpl -->  "-warlord" Warlord
HeroFactoryImpl -->  "-mage" Mage
HeroFactoryImpl ..|> HeroFactory
@enduml