@startuml
package com.iluwatar.ruleengine {
  class App {
    - LOGGER : Logger {static}
    + App()
    + main(args : String[]) {static}
  }
  class Candidate {
    - closeFamilyTies : String
    - englishProficiency : String
    - isNominatedOccupationOnTheList : boolean
    - isSmallBusinessOwner : boolean
    - lengthOfCurrentResidence : int
    - lengthOfEmployment : int
    - localAssets : int
    - smallBusinessTurnover : int
    - tertiaryQualification : String
    - yearsOfStudy : int
    + Candidate()
    + getCloseFamilyTies() : String
    + getEnglishProficiency() : String
    + getLengthOfCurrentResidence() : int
    + getLengthOfEmployment() : int
    + getLocalAssets() : int
    + getSmallBusinessTurnover() : int
    + getTertiaryQualification() : String
    + getYearsOfStudy() : int
    + isNominatedOccupationOnTheList() : boolean
    + isSmallBusinessOwner() : boolean
    + setCloseFamilyTies(closeFamilyTies : String)
    + setEnglishProficiency(englishProficiency : String)
    + setLengthOfCurrentResidence(lengthOfCurrentResidence : int)
    + setLengthOfEmployment(lengthOfEmployment : int)
    + setLocalAssets(localAssets : int)
    + setNominatedOccupationOnTheList(isNominatedOccupationOnTheList : boolean)
    + setSmallBusinessOwner(isSmallBusinessOwner : boolean)
    + setSmallBusinessTurnover(smallBusinessTurnover : int)
    + setTertiaryQualification(tertiaryQualification : String)
    + setYearsOfStudy(yearsOfStudy : int)
  }
  class CloseFamilyRule {
    + CloseFamilyRule()
    + runRule(candidate : Candidate) : int
    + shouldRun(candidate : Candidate) : boolean
  }
  class EnglishProficiencyRule {
    + EnglishProficiencyRule()
    + runRule(candidate : Candidate) : int
    + shouldRun(candidate : Candidate) : boolean
  }
  interface IMigrationRule {
    + runRule(Candidate) : int {abstract}
    + shouldRun(Candidate) : boolean {abstract}
  }
  class LengthOfEmploymentRule {
    + LengthOfEmploymentRule()
    + runRule(candidate : Candidate) : int
    + shouldRun(candidate : Candidate) : boolean
  }
  class LengthOfResidenceRule {
    + LengthOfResidenceRule()
    + runRule(candidate : Candidate) : int
    + shouldRun(candidate : Candidate) : boolean
  }
  class LocalAssetsRule {
    + LocalAssetsRule()
    + runRule(candidate : Candidate) : int
    + shouldRun(candidate : Candidate) : boolean
  }
  class NominatedOccupationRule {
    + NominatedOccupationRule()
    + runRule(candidate : Candidate) : int
    + shouldRun(candidate : Candidate) : boolean
  }
  class SmallBusinessRule {
    + SmallBusinessRule()
    + runRule(candidate : Candidate) : int
    + shouldRun(candidate : Candidate) : boolean
  }
  class TertiaryQualificationRule {
    + TertiaryQualificationRule()
    + runRule(candidate : Candidate) : int
    + shouldRun(candidate : Candidate) : boolean
  }
  class YearsOfStudyRule {
    + YearsOfStudyRule()
    + runRule(candidate : Candidate) : int
    + shouldRun(candidate : Candidate) : boolean
  }
}
CloseFamilyRule ..|> IMigrationRule 
EnglishProficiencyRule ..|> IMigrationRule 
LengthOfEmploymentRule ..|> IMigrationRule 
LengthOfResidenceRule ..|> IMigrationRule 
LocalAssetsRule ..|> IMigrationRule 
NominatedOccupationRule ..|> IMigrationRule 
SmallBusinessRule ..|> IMigrationRule 
TertiaryQualificationRule ..|> IMigrationRule 
YearsOfStudyRule ..|> IMigrationRule 
@enduml